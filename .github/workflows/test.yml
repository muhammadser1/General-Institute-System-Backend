name: Tests and Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🧪 Run tests with pytest
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: ✅ Test Summary
      if: always()
      run: |
        echo "### Test Results 🧪" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Python Version: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install linting tools
      run: |
        pip install flake8 black isort
    
    - name: 🎨 Check code formatting with Black
      run: |
        black --check app/ tests/
      continue-on-error: true
    
    - name: 📏 Check imports with isort
      run: |
        isort --check-only app/ tests/
      continue-on-error: true
    
    - name: 🔍 Lint with flake8
      run: |
        flake8 app/ tests/ --max-line-length=100 --exclude=venv,__pycache__,.git
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 🔒 Run security scan with Bandit
      run: |
        pip install bandit
        bandit -r app/ -ll
      continue-on-error: true
    
    - name: 🔐 Check for vulnerabilities in dependencies
      run: |
        pip install safety
        safety check --file requirements.txt
      continue-on-error: true

  # This job will fail the entire workflow if any test fails
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: always()
    
    steps:
    - name: ✅ All tests passed
      if: ${{ needs.test.result == 'success' }}
      run: |
        echo "### ✅ All Tests Passed! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All test suites completed successfully." >> $GITHUB_STEP_SUMMARY
        echo "Ready to merge! 🚀" >> $GITHUB_STEP_SUMMARY
    
    - name: ❌ Tests failed
      if: ${{ needs.test.result == 'failure' }}
      run: |
        echo "### ❌ Tests Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Some tests failed. Please fix before merging." >> $GITHUB_STEP_SUMMARY
        exit 1

